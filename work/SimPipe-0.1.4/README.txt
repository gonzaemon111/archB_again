SimPipe: A Simple Mips Pipeline Simulator

1. はじめに

SimPipeは早稲田大学で開発されたMIPSパイプラインとデータキャッシュの
シミュレーションを行うプログラムです。
本プログラムは東工大で開発されたMIPS命令セットシミュレータSimMipsの
上で動作します。

2. コンパイル

Intel Linux, Cygwin, Mac OS X 10.6.5上での動作を確認しています。
Big-endianな環境では動作しません。

SimPipe-0.1.4.tgzのアーカイブを入手した場合は以下のようにします。
$ tar xvzf SimPipe-0.1.4.tgz
$ cd SimPipe-0.1.4
$ make

3. コマンドラインオプション

以下のコマンドラインオプションが利用可能です。

-dcache-size [num]
    データキャッシュのサイズをキロバイト単位で指定します
    デフォルトは1キロバイトです
-dcache-way [num]
　　データキャッシュのウェイ数を指定します
    デフォルトは1です
-dcache-line [num]
    データキャッシュのラインサイズをバイト単位で指定します
    デフォルトは16バイトです
-dcache-penalty [num]
    データキャッシュのミスヒットペナルティを指定します
    デフォルトは10サイクルです
-dcache-writeback [01]
    データキャッシュの書き込みポリシーでライトバックとライトスルーを指定します
    デフォルトはライトスルーです
-f[01]: Disable forwarding [0] or Enable forwarding [1]
    フォワーディングの有無を指定します
    デフォルトはフォワーディングありです
-l
    パイプラインの状況をpipe.logというファイルに生成します

なお、データキャッシュはデフォルトではオフになっており、
全てのメモリアクセスが1サイクルで動作します。
データキャッシュ関係のオプションを一つ以上指定すると、
キャッシュがオンになります。

4. ChangeLog

v0.1.4 2016-09-08
- compulsory missの計算方法が手抜きだったのを直した
  ただし、write-throughの場合のミス分類の手抜きは未対応
- branch系命令のフォワーディングのモデルをcomputer organizationのものに合わせた
  すなわち、idにbranch系命令がある場合は先行のALU系命令にRAWがある場合に1サイクル、
  load系命令にRAWがある場合に2サイクルのストールが生じる

v0.1.3 2010-12-27
- ロード命令のフォワーディングに関するバグを修正した
-- 以下のような命令シーケンスを考える
--- (1) addu $2,$3,$2
--- (2) lw   $2,0($2)
--- (3) addu $2,$4,$2
-- このとき、(3)は(2)でロードされた値を読まなければならないので(3)は1サイクルストールする必要がある
-- しかしながら、(1)のフォワーディングが誤って有効となりストール無しとなってしまっていた
-- そこで、ロード命令がEステージを通過する際に先行命令のフォワーディングを無効にするような仕組みを作った

v0.1.2 2010-11-15
- キャッシュラインのデフォルト値を16バイトにした

v0.1.1 2009-12-28
- レジスタファイル関連のバグを修正した
-- レジスタのロックを真偽値からアップ・ダウンカウンタで管理するようにした
-- EステージでWRITE_RRA属性を持つ命令のフォワーディングを行うようにした
-- WRITE_RDとWRITE_RD_COND属性のロックとフォワーディングの条件が間違っていたのを修正した
- ログファイルでフェッチステージに進入した命令のアドレスを正しく出力するようにした
- README.txtを書いた

v0.1.0 2009-12-02
- 公開
